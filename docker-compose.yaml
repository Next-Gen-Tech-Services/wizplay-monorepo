version: "3.8"

services:
  user_db_server:
    image: "postgres:15-alpine"
    container_name: user_db_server
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: user_db
      POSTGRES_PASSWORD: user_db
      POSTGRES_DB: user_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_db -d user_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_db_server:
    image: "postgres:15-alpine"
    container_name: auth_db_server
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: auth_db
      POSTGRES_PASSWORD: auth_db
      POSTGRES_DB: auth_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_db -d auth_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  match_db_server:
    image: "postgres:15-alpine"
    container_name: match_db_server
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: match_db
      POSTGRES_PASSWORD: match_db
      POSTGRES_DB: match_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - match_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U match_db -d match_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  coupon_db_server:
    image: "postgres:15-alpine"
    container_name: coupon_db_server
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: coupon_db
      POSTGRES_PASSWORD: coupon_db
      POSTGRES_DB: coupon_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - coupon_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coupon_db -d coupon_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  contest_db_server:
    image: "postgres:15-alpine"
    container_name: contest_db_server
    ports:
      - "5438:5432"
    environment:
      POSTGRES_USER: contest_db
      POSTGRES_PASSWORD: contest_db
      POSTGRES_DB: contest_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - contest_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contest_db -d contest_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  wallet_db_server:
    image: "postgres:15-alpine"
    container_name: wallet_db_server
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: wallet_db
      POSTGRES_PASSWORD: wallet_db
      POSTGRES_DB: wallet_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - wallet_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wallet_db -d wallet_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka with improved configuration
  kafka:
    image: bitnami/kafka:latest
    container_name: kafka
    ports:
      - "9092:9092" # external access (host)
      - "9094:9094" # internal access (docker services)
    environment:
      - KAFKA_CFG_NODE_ID=1
      - KAFKA_CFG_PROCESS_ROLES=broker,controller
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=1@kafka:9093
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093,DOCKER_INTERNAL://:9094
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://localhost:9092,DOCKER_INTERNAL://kafka:9094
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=PLAINTEXT:PLAINTEXT,CONTROLLER:PLAINTEXT,DOCKER_INTERNAL:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE=false
      # Performance improvements
      - KAFKA_CFG_NUM_NETWORK_THREADS=8
      - KAFKA_CFG_NUM_IO_THREADS=16
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test:
        ["CMD", "kafka-topics.sh", "--bootstrap-server=kafka:9094", "--list"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Optional: Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - with-redis

  # Optional: Development tools container

networks:
  app-network:
    driver: bridge

volumes:
  kafka_data:
    driver: local
  user_db_data:
    driver: local
  auth_db_data:
    driver: local
  match_db_data:
    driver: local
  coupon_db_data:
    driver: local
  contest_db_data:
    driver: local
  redis_data:
    driver: local
