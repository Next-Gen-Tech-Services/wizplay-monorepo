# docker-compose.yaml (updated - removed 'version:' and replaced Bitnami kafka with Confluent)
services:
  user_db_server:
    image: "postgres:15-alpine"
    container_name: user_db_server
    ports:
      - "5436:5432"
    environment:
      POSTGRES_USER: user_db
      POSTGRES_PASSWORD: user_db
      POSTGRES_DB: user_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - user_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user_db -d user_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  auth_db_server:
    image: "postgres:15-alpine"
    container_name: auth_db_server
    ports:
      - "5434:5432"
    environment:
      POSTGRES_USER: auth_db
      POSTGRES_PASSWORD: auth_db
      POSTGRES_DB: auth_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - auth_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth_db -d auth_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  match_db_server:
    image: "postgres:15-alpine"
    container_name: match_db_server
    ports:
      - "5435:5432"
    environment:
      POSTGRES_USER: match_db
      POSTGRES_PASSWORD: match_db
      POSTGRES_DB: match_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - match_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U match_db -d match_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  coupon_db_server:
    image: "postgres:15-alpine"
    container_name: coupon_db_server
    ports:
      - "5437:5432"
    environment:
      POSTGRES_USER: coupon_db
      POSTGRES_PASSWORD: coupon_db
      POSTGRES_DB: coupon_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - coupon_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U coupon_db -d coupon_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  contest_db_server:
    image: "postgres:15-alpine"
    container_name: contest_db_server
    ports:
      - "5438:5432"
    environment:
      POSTGRES_USER: contest_db
      POSTGRES_PASSWORD: contest_db
      POSTGRES_DB: contest_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - contest_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contest_db -d contest_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  wallet_db_server:
    image: "postgres:15-alpine"
    container_name: wallet_db_server
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: wallet_db
      POSTGRES_PASSWORD: wallet_db
      POSTGRES_DB: wallet_service
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    volumes:
      - wallet_db_data:/var/lib/postgresql/data
      - ./database/init/:/docker-entrypoint-initdb.d/
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wallet_db -d wallet_service"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Zookeeper for Kafka (Confluent)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "echo ruok | nc -w 2 localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Kafka (Confluent single-broker for dev)
  kafka:
    image: confluentinc/cp-kafka:7.4.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,INTERNAL:PLAINTEXT
      # Advertise the EC2 private hostname so host clients (and remote if permitted) can reach it.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://ip-172-31-9-92:9092,INTERNAL://kafka:9093
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,INTERNAL://0.0.0.0:9093
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'false'
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - app-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics --bootstrap-server localhost:9092 --list || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Optional: Redis for caching/sessions
  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - with-redis

networks:
  app-network:
    driver: bridge

volumes:
  kafka_data:
    driver: local
  user_db_data:
    driver: local
  auth_db_data:
    driver: local
  match_db_data:
    driver: local
  coupon_db_data:
    driver: local
  contest_db_data:
    driver: local
  wallet_db_data:
    driver: local
  zookeeper_data:
    driver: local
  redis_data:
    driver: local
